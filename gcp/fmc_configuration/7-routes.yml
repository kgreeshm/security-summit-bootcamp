- hosts: all
  connection: httpapi
  tasks:
    - name: Get Domain
      cisco.fmcansible.fmc_configuration:
        operation: getAllDomain
        register_as: domain


    - name: Get security zones
      cisco.fmcansible.fmc_configuration:
        operation: getAllSecurityZoneObject
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: zones

    - name: Get Devices
      cisco.fmcansible.fmc_configuration:
        operation: getAllDevice
        path_params:
          domainUUID: '{{ domain[0].uuid }}' 
        register_as: device_list 
    

    - name: Get Physical Interfaces
      cisco.fmcansible.fmc_configuration:
        operation: getAllFTDPhysicalInterface
        path_params:
          containerUUID: '{{ device_list[0].id }}'
          domainUUID: '{{ domain[0].uuid }}'
        register_as: physical_interfaces
        query_params:
          expanded: true

    - name: Setup Outside Interface
      cisco.fmcansible.fmc_configuration:
        operation: updateFTDPhysicalInterface
        data:
          ifname: outside
          ipv4:
            dhcp:
              enableDefaultRouteDHCP: True
              dhcpRouteMetric: 100
          securityZone: '{{ zones[1] }}'
          MTU: 1500
          enabled: True
          mode: NONE
          type: physicalinterface
          name: GigabitEthernet0/0
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
          containerUUID: '{{ device_list[0].id }}'
          objectId: '{{ physical_interfaces[0].id }}'
    
    - name: Setup Inside Interface
      cisco.fmcansible.fmc_configuration:
        operation: updateFTDPhysicalInterface
        data:
          ifname: inside
          ipv4:
            dhcp:
              enableDefaultRouteDHCP: False
              dhcpRouteMetric: 1
          securityZone: '{{ zones[0] }}'
          MTU: 1500
          enabled: True
          mode: NONE
          type: physicalinterface
          name: GigabitEthernet0/1
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
          containerUUID: '{{ device_list[0].id }}'
          objectId: '{{ physical_interfaces[1].id }}'
    
    - name: Waiting for static routes.......
      pause:
        minutes: 1

    - name: Get Physical Interfaces2
      cisco.fmcansible.fmc_configuration:
        operation: getAllFTDPhysicalInterface
        path_params:
          containerUUID: '{{ device_list[0].id }}'
          domainUUID: '{{ domain[0].uuid }}'
        register_as: physical_interfaces2
        query_params:
          expanded: true


    - name: Get app
      cisco.fmcansible.fmc_configuration:
        operation: getAllNetworkObject
        query_params:
          filter: 'nameOrValue:gcp-app'
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: getapp

    - name: Get inside GW
      cisco.fmcansible.fmc_configuration:
        operation: getAllHostObject
        query_params:
          filter: 'nameOrValue:gcp-inside-gateway'
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: getigw
    
    - name: Get df GW
      cisco.fmcansible.fmc_configuration:
        operation: getAllHostObject
        query_params:
          filter: 'nameOrValue:gcp-default-gateway'
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: getdfgw

    - name: Get any-ipv4
      cisco.fmcansible.fmc_configuration:
        operation: getAllNetworkObject
        query_params:
          filter: 'nameOrValue:any-ipv4'
        path_params:
          domainUUID: '{{ domain[0].uuid }}'
        register_as: getIpv4

    - name: Setup static route
      cisco.fmcansible.fmc_configuration:
        operation: upsertIPv4StaticRouteModel
        data:
          interfaceName: "{{ physical_interfaces2[1].ifname }}"
          selectedNetworks:
            - id: "{{ getapp[0].id }}"
          gateway: 
            object:
              id: "{{ getigw[0].id }}"
          name: "gcp_app_route"
          metricValue: 1
          type: IPv4StaticRoute
        path_params:
          containerUUID: '{{ device_list[0].id }}'
          domainUUID: '{{ domain[0].uuid }}'
    
    - name: Setup default route
      cisco.fmcansible.fmc_configuration:
        operation: upsertIPv4StaticRouteModel
        data:
          interfaceName: "{{ physical_interfaces2[0].ifname }}"
          selectedNetworks:
            - id: "{{ getIpv4[0].id }}"
          gateway: 
            object:
              id: "{{ getdfgw[0].id }}"
          name: "gcp_default_route"
          metricValue: 1
          type: IPv4StaticRoute
        path_params:
          containerUUID: '{{ device_list[0].id }}'
          domainUUID: '{{ domain[0].uuid }}'

    